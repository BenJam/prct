// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mysql"
    url = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    mobile        String?
    role          Role @default(USER)
    accounts      Account[]
    sessions      Session[]
    rides         UsersOnRides[]

    @@index(email)
}

model Ride {
    id            String    @id @default(cuid())
    name          String
    group         String
    date          DateTime
    destination   String?
    distance      Int?
    route         String?
    leader        String?
    speed         Int?
    users         UsersOnRides[]

    @@index(date)
}

model UsersOnRides {
  ride       Ride     @relation(fields: [rideId], references: [id])
  rideId     String   // relation scalar field (used in the `@relation` attribute above)
  user       User @relation(fields: [userId], references: [id])
  userId     String // relation scalar field (used in the `@relation` attribute above)
  createdAt DateTime @default(now())

  @@id([rideId, userId])
}

enum Role {
  USER
  LEADER
  ADMIN
}

// TODO: Join table to Users to Ride